const { parentPort } = require('worker_threads');
const ROSLIB = require('roslib');
const WebSocket = require('ws');

let ros;
let reconnectInterval = 5000; // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà (ms)
let rosbridgeURL = '';
let reconnectTimer = null;
let rosAutoConnected = false;

let slamPoseSubscriber = null;
let amclPoseSubscriber = null;
let isSlamPoseInitialized = false; 

const BUFFER_SIZE_VOLTAGE = 50;  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
let voltageBuffer = [];


parentPort.on('message', (message) => {
  try {
    switch (message.type) {
      case 'connectROS':
        connectROSBridge(message.url);
        break;
      case 'sendDrive':
        sendDrive(message.command);
        break;
      case 'sendCmd':
        sendCommand(message.command);
        break;
      case 'sendServo':
        sendServo(message.command);
        break;
      case 'sendRelay':
        sendRelayViaCommand(message.relayId, message.command);
        break;
      case 'listMaps':
        callListMapsService();
        break;
      case 'loadMap':
        callLoadMapService(message.mapName);
        break;
      case 'requestMapFileAsBase64':
        requestMapFileAsBase64(message.mapName);
        break;
      case 'saveMap':
        callSaveMapService(message.mapName);
        break;
      case 'sendSingleGoal':
        sendSingleGoalToMoveBase(message.data); 
        break;
      case 'startSLAM':
        callStartSLAMService();
        break;
      case 'stopSLAM':
        callStopSLAMService();
        break;
      case 'setInitialPose':
        publishInitialPose(message.pose);
        break;
      case 'startStream':
        callStartStreamService();
        break;
      case 'stopStream':
        callStopStreamService();
        break;
      case 'switchPoseSubscriber':
         case 'switchPoseSubscriber':
        console.log(`Server: Switching pose subscriber to mode: ${message.mode}`);
        
        if (amclPoseSubscriber) {
          amclPoseSubscriber.unsubscribe();
          amclPoseSubscriber = null;
        }
        // <<< CHANGED: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ unsubscribe ‡∏Ç‡∏≠‡∏á slam
        if (slamPoseSubscriber) {
          slamPoseSubscriber.unsubscribe();
          slamPoseSubscriber = null;
        }

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        if (message.mode === 'amcl') {
          subscribeAmclPose();
        } else if (message.mode === 'slam') {
          // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ flag ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£ subscribe ‡∏à‡∏≤‡∏Å UI ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
          subscribeRobotPoseSlam();
        }
        break;

      case 'deleteMap':
        callDeleteMapService(message.mapName);
        break;
      case 'resetSLAM':
        callResetSLAMService();
        break;
      case 'startPatrol':
        callStartPatrolService(message.goals, message.loop);
        break;
      case 'pausePatrol':
        callPausePatrolService();
        break;
      case 'resumePatrol':
        callResumePatrolService();
        break;
      case 'stopPatrol':
        callStopPatrolService();
        break;
      default:
        console.warn(`Server worker  Unknown command: ${message.type}`);
    }
  } catch (err) {
    console.error(`Server: Worker Error while processing message [${message.type}]:`, err.message);
  }
});


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ROSBridge
function connectROSBridge(url) {
  console.log('Server : Connecting to ROSBridge at ', url);
  rosAutoConnected = true;
  
  
  if (ros && ros.isConnected && rosbridgeURL === url) {
    console.log('Server : Already connected to ROSBridge at ', url);
    //parentPort.postMessage({ type: 'log', data: 'Connected to ROSBridge' });
    return;
  }

  if (ros) {
    console.log('Server : Closing previous ROSBridge connection before reconnecting...');
    //parentPort.postMessage({ type: 'log', data: 'Server : Closing previous ROSBridge connection before reconnecting...' });
    ros.close();
  }


  rosbridgeURL = url;
  ros = new ROSLIB.Ros({ 
    url: url,
    encoding: 'ascii'
  });

  ros.on('connection', () => {
    console.log('Serverosbridger : Connected to ROSBridge at', url);
    parentPort.postMessage({ type: 'connection', data: 'connected' });
    //subscribe function
    subscribeSensorData();
    subscribeMapData();
    subscribePlannedPath();
    subscribeMoveBaseResult();
    subscribeLaserScanData();
    if (reconnectTimer) {20
      clearInterval(reconnectTimer);
      reconnectTimer = null;
      console.log('Server : Reconnect attempts stopped after successful connection at', url);
    }
  });

  ros.on('error', (error) => {
    console.log('Server : Error connecting to ROSBridge:');
    parentPort.postMessage({ type: 'connection', data: 'error' });
    startReconnect();
  });

  ros.on('close', () => {
    console.log('Server :  Connection to ROSBridge closed url : ',url);
    parentPort.postMessage({ type: 'connection', data: 'disconnected' });
    startReconnect();
  });
}

function startReconnect() {
  if (!reconnectTimer) {
    console.log(`Server : üîÑ Attempting to reconnect to ROSBridge every ${reconnectInterval / 1000} seconds...`);
    reconnectTimer = setInterval(() => {
      if (!ros.isConnected) {
        console.log('Server : üîó Reconnecting to ROSBridge at', rosbridgeURL);
        connectROSBridge(rosbridgeURL); // ‚úÖ ‡πÉ‡∏ä‡πâ IP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
      } else {
        clearInterval(reconnectTimer);
        reconnectTimer = null;
      }
    }, reconnectInterval);
  }
}

function sendRelayViaCommand(relayId, command) {
  const relayCommandMap = {
    relay1: {
      on:  0x08000001,
      off: 0x08000000
    },
    relay2: {
      on:  0x08000003,
      off: 0x08000002
    }
  };

  const cmdValue = relayCommandMap[relayId]?.[command];
  if (cmdValue === undefined) {
    console.error(`Server : ‚ùå Unknown relay command: ${relayId}, ${command}`);
    return;
  }

  console.log(`Server : üì§ Relay ${relayId} ${command.toUpperCase()} ‚Üí HEX: ${cmdValue.toString(16)} ‚Üí DEC: ${cmdValue}`);
  sendCommand(cmdValue);
}


// ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á UInt32 Command ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ROSBridge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
function sendCommand(command) {
  if (!ros || !ros.isConnected) {
    console.error('Server : ‚ùå Cannot send command: ROSBridge is not connected.');
    return;
  }
  const uint32Value = command >>> 0;
  console.log(`Server : üì§ Sending UInt32 Command: ${uint32Value}`);

  const cmdEditTopic = new ROSLIB.Topic({
    ros: ros,
    name: '/rb/cm/ed',
    messageType: 'std_msgs/UInt32',
  });

  const message = new ROSLIB.Message({
    data: uint32Value,
  });

  cmdEditTopic.publish(message);
}

//‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á UInt16 Command ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ROSBridge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏•‡πâ‡∏≠
function sendDrive(command) {
  const uint16Value = command & 0xFFFF; // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 16-bit
  console.log(`Server : Sending uint16 Command: ${uint16Value}`);
  const cmdVelTopic = new ROSLIB.Topic({
    ros: ros,
    name: '/rb/cm/dr',
    messageType: 'std_msgs/UInt16'
  });

  const message = new ROSLIB.Message({
    data: uint16Value
  });

  cmdVelTopic.publish(message);
}

//‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á UInt8 Command ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ROSBridge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á servo
function sendServo(command) {
  const uint8Value = command & 0xFF; // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 8-bit
  console.log(`Server : Sending uint8 Command: ${uint8Value}`);
  const cmdVelTopic = new ROSLIB.Topic({
    ros: ros,
    name: '/rb/cm/sv',
    messageType: 'std_msgs/UInt8'
  });

  const message = new ROSLIB.Message({
    data: uint8Value
  });

  cmdVelTopic.publish(message);
}
//Subscribe ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å ROS
function subscribeMapData() {
  const mapTopic = new ROSLIB.Topic({
    ros: ros,
    name: '/map',
    messageType: 'nav_msgs/OccupancyGrid',
    throttle_rate: 1000
  });

  mapTopic.subscribe((msg) => {
    if (!isSlamPoseInitialized) {
      console.log('Server: First map message received, initializing SLAM pose subscription.');
      isSlamPoseInitialized = true; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ flag ‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥
      
      // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô subscribe
      setTimeout(() => {
        subscribeRobotPoseSlam();
      }, 200);
    }
    parentPort.postMessage({
      type: 'live-map',
      data: msg
    });
  });
}
function subscribeSlamMapData() {
  const slamMapTopic = new ROSLIB.Topic({
    ros: ros,
    name: '/rb/slam/map', 
    messageType: 'nav_msgs/OccupancyGrid',
  });

  console.log(`[Server] Subscribing to SLAM map topic: ${slamMapTopic.name}`);

  slamMapTopic.subscribe((msg) => {
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å SLAM ‡∏ú‡πà‡∏≤‡∏ô Message Type ‡πÉ‡∏´‡∏°‡πà
    parentPort.postMessage({
      type: 'slam-map-update', // ‚úÖ ‡πÉ‡∏ä‡πâ Type ‡πÉ‡∏´‡∏°‡πà!
      data: msg
    });
  });
}
function subscribeRobotPoseSlam() {
  if (!ros || !ros.isConnected) return;
  console.log('Server: Subscribing to SLAM pose topic /robot_pose_sample...');

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å subscriber ‡πÄ‡∏Å‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (slamPoseSubscriber) {
    slamPoseSubscriber.unsubscribe();
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Topic object ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞ "‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤" ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ slamPoseSubscriber
  slamPoseSubscriber = new ROSLIB.Topic({
    ros: ros,
    name: '/robot_pose_sample',
    messageType: 'geometry_msgs/PoseStamped'
  });

  slamPoseSubscriber.subscribe((msg) => {
    const pos = msg.pose.position;
    const ori = msg.pose.orientation;
    
    parentPort.postMessage({
      type: 'robot-pose-slam',
      data: { position: pos, orientation: ori }
    });
  });
}
function subscribeAmclPose() {
  if (!ros || !ros.isConnected) return;
  console.log('Server: Subscribing to AMCL pose topic /amcl_pose...');

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ subscriber ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô
  if (amclPoseSubscriber) {
    amclPoseSubscriber.unsubscribe();
  }

  amclPoseSubscriber = new ROSLIB.Topic({
    ros: ros,
    name: '/amcl_pose',
    messageType: 'geometry_msgs/PoseWithCovarianceStamped'
  });

  amclPoseSubscriber.subscribe((msg) => {
    const pos = msg.pose.pose.position;
    const ori = msg.pose.pose.orientation;
    parentPort.postMessage({
      type: 'robot-pose-amcl',
      data: { position: pos, orientation: ori }
    });
  });
}
function subscribeLaserScanData() {
  if (!ros || !ros.isConnected) return;

  const scanTopic = new ROSLIB.Topic({
    ros: ros,
    name: '/scan', // ‡∏ä‡∏∑‡πà‡∏≠ Topic ‡∏Ç‡∏≠‡∏á Laser Scan ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    messageType: 'sensor_msgs/LaserScan',
    throttle_rate : 2000 // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
  });

  console.log('[Server] Subscribing to LaserScan topic: /scan');

  scanTopic.subscribe((message) => {
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    parentPort.postMessage({
      type: 'laser-scan-update',
      data: {
        angle_min: message.angle_min,
        angle_increment: message.angle_increment,
        ranges: message.ranges
      }
    });
  });
}
function subscribePlannedPath() {
  const planTopic = new ROSLIB.Topic({
    ros: ros,
    name: '/move_base/NavfnROS/plan', 
    messageType: 'nav_msgs/Path'
  });

  planTopic.subscribe((message) => {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• poses ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á {x, y}
    const pathPoints = message.poses.map(p => ({
      x: p.pose.position.x,
      y: p.pose.position.y
    }));

    parentPort.postMessage({
      type: 'planned-path',
      data: pathPoints
    });
  });
}

function subscribeMoveBaseResult() {
  if (!ros || !ros.isConnected) return;

  const resultTopic = new ROSLIB.Topic({
    ros: ros,
    name: '/move_base/result',
    messageType: 'move_base_msgs/MoveBaseActionResult'
  });

  resultTopic.subscribe((msg) => {
    if (!msg.status) return;

    let result = { status: 'UNKNOWN', text: msg.status.text || '' };

    switch (msg.status.status) {
      case 0: // PENDING
        console.log('Server: Goal is PENDING.');
        // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô /result topic ‡πÅ‡∏ï‡πà‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        result.status = 'PENDING';
        break;
      case 1: // ACTIVE
        console.log('Server: Goal is ACTIVE.');
        // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô /result topic
        result.status = 'ACTIVE';
        break;
      case 2: // PREEMPTED
        //‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡πÇ‡∏î‡∏¢ Goal ‡πÉ‡∏´‡∏°‡πà): Goal ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ Goal ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà
        console.warn('Server: Goal PREEMPTED (cancelled by a new goal).');
        result.status = 'PREEMPTED';
        break;
      case 3: // SUCCEEDED
        // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
        console.log('Server: Goal SUCCEEDED.');
        result.status = 'SUCCEEDED';
        break;
      case 4: // ABORTED
        // ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á)
        console.error('Server: Goal ABORTED (failed to reach).');
        result.status = 'ABORTED';
        break;
      case 5: // REJECTED
        // ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÇ‡∏î‡∏¢ action server (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
        console.error('Server: Goal REJECTED (invalid goal).');
        result.status = 'REJECTED';
        break;
      case 6: // PREEMPTING
        // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        console.log('Server: Goal is PREEMPTING (cancellation in progress).');
        result.status = 'PREEMPTING';
        break;
      case 7: // RECALLING
        //  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Goal ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà Server ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö
        console.log('Server: Goal is RECALLING (cancellation requested).');
        result.status = 'RECALLING';
        break;
      case 8: // RECALLED
        //‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Server ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤ Goal ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
        console.warn('Server: Goal RECALLED (cancelled successfully).');
        result.status = 'RECALLED';
        break;
      case 9: // LOST
        //‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢: ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö Action Server ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
        console.error('Server: Goal LOST (action server disappeared).');
        result.status = 'LOST';
        break;
      default:
        console.warn(`Server: Goal finished with unhandled status: ${msg.status.status}`);
        break;
    }

    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Main Process ‡∏ú‡πà‡∏≤‡∏ô Event ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    if (result.status !== 'UNKNOWN' && result.status !== 'ACTIVE' && result.status !== 'PENDING') {
      parentPort.postMessage({ type: 'goal-result', data: result });
    }
  });
}

// Power
function subscribeSensorData() {
  const sensorTopic = new ROSLIB.Topic({
    ros: ros,
    name: '/sensor/data',
    messageType: 'std_msgs/UInt32',
    throttle_rate: 500
  });

  sensorTopic.subscribe((message) => {
    const raw = message.data >>> 0;
    const current_mA = (raw >> 16) & 0xFFFF;
    const voltage_cV = raw & 0xFFFF;

    const voltage_V = voltage_cV / 100.0;
    const current_A = current_mA / 1000.0;

    // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ buffer
    voltageBuffer.push(voltage_V);
    if (voltageBuffer.length > BUFFER_SIZE_VOLTAGE) {
        voltageBuffer.shift(); // ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏≠‡∏≠‡∏Å
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    let sum = 0;
    for (let i = 0; i < voltageBuffer.length; i++) {
        sum += voltageBuffer[i];
    }
    let avgVoltage = 0;
    if (voltageBuffer.length > 0) {
        avgVoltage = sum / voltageBuffer.length;
    } else {
        avgVoltage = 0; // ‡∏Ñ‡πà‡∏≤ default 
    }



    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % SOC ‡πÅ‡∏ö‡∏ö linear (12.0V = 0%, 14.6V = 100%)
    let soc = 0;
    const maxVoltage = 13.50;
    const minVoltage = 12.60;
    if (avgVoltage >= maxVoltage) soc = 100;
    else if (avgVoltage <= minVoltage) soc = 0;
    else soc = ((avgVoltage - minVoltage) / (maxVoltage - minVoltage)) * 100;

    parentPort.postMessage({
      type: 'power',
      data: {
        voltage: voltage_V.toFixed(2),
        current: current_A.toFixed(2),
        percent: soc.toFixed(0)
      }
    });
  });
}

// service call ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö list_maps
function callListMapsService() {
  if (!ros || !ros.isConnected) {
    parentPort.postMessage({ type: 'map-list', data: [], error: 'ROSBridge not connected' });
    return;
  }

  const service = new ROSLIB.Service({
    ros: ros,
    name: '/map_manager/list_maps',
    serviceType: 'ptR1_navigation/ListMaps'
  });

  const request = new ROSLIB.ServiceRequest({});
  service.callService(request, (result) => {
    parentPort.postMessage({ type: 'map-list', data: result.names });
  }, (err) => {
    console.error('‚ùå list_maps service failed:', err);
    parentPort.postMessage({ type: 'map-list', data: [], error: err.toString() });
  });
}
// service call ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö load_map ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô active map
function callLoadMapService(mapName) {
  if (!ros || !ros.isConnected) {
    parentPort.postMessage({ type: 'map-load', data: { success: false, message: 'ROSBridge not connected' } });
    return;
  }

  const service = new ROSLIB.Service({
    ros: ros,
    name: '/map_manager/load_map',
    serviceType: 'ptR1_navigation/LoadMap'
  });

  const request = new ROSLIB.ServiceRequest({ name: mapName });

  service.callService(request, (result) => {
  parentPort.postMessage({
    type: 'map-load',
    data: {
      ...result,
      name: mapName  // ‚úÖ ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ map ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà
    }
  });
}, (err) => {
  console.error('‚ùå load_map service failed:', err);
  parentPort.postMessage({
    type: 'map-load',
    data: {
      success: false,
      message: err.toString(),
      name: mapName  // ‡πÅ‡∏°‡πâ error ‡∏Å‡πá‡∏¢‡∏±‡∏á‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö
    }
  });
});

}
// service call ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö map_file ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠
function requestMapFileAsBase64(mapName) {
  const service = new ROSLIB.Service({
    ros,
    name: '/map_manager/get_map_file',
    serviceType: 'ptR1_navigation/GetMapFile'
  });

  const request = new ROSLIB.ServiceRequest({ name: mapName });

  service.callService(request, (res) => {
    if (res.success) {
      parentPort.postMessage({
        type: 'map-data',
        data: {
          name: mapName,
          base64: res.image_data_base64,
          yaml: res.yaml_data 
        }
      });
    } else {
      console.warn(`‚ùå Map fetch failed: ${res.message}`);
    }
  });
}

function callSaveMapService(mapName) {
  if (!ros || !ros.isConnected) {
    parentPort.postMessage({
      type: 'map-save',
      data: { success: false, message: 'ROSBridge not connected', name: mapName }
    });
    return;
  }

  const service = new ROSLIB.Service({
    ros: ros,
    name: '/map_manager/save_map',
    serviceType: 'ptR1_navigation/SaveMap'
  });

  const request = new ROSLIB.ServiceRequest({ name: mapName });

  service.callService(request, (result) => {
    parentPort.postMessage({
      type: 'map-save',
      data: {
        ...result,
        name: mapName
      }
    });
  }, (err) => {
    console.error('‚ùå save_map service failed:', err);
    parentPort.postMessage({
      type: 'map-save',
      data: {
        success: false,
        message: err.toString(),
        name: mapName
      }
    });
  });
}
function callStartSLAMService() {
  if (!ros || !ros.isConnected) {
    parentPort.postMessage({
      type: 'slam-result',
      data: { success: false, message: 'ROSBridge not connected' }
    });
    return;
  }

  const service = new ROSLIB.Service({
    ros: ros,
    name: '/map_manager/start_slam',
    serviceType: 'ptR1_navigation/StartSLAM' 
  });

  const request = new ROSLIB.ServiceRequest({});

  service.callService(request, (res) => {
    parentPort.postMessage({
      type: 'slam-result',
      data: { success: res.success, message: res.message }
    });
  }, (err) => {
    parentPort.postMessage({
      type: 'slam-result',
      data: { success: false, message: err.toString() }
    });
  });
}
function callStopSLAMService() {
  const service = new ROSLIB.Service({
    ros: ros,
    name: '/map_manager/stop_processes',
    serviceType: 'ptR1_navigation/StopSLAM'
  });

  const req = new ROSLIB.ServiceRequest({});
  service.callService(req, (res) => {
    parentPort.postMessage({
      type: 'slam-stop-result',
      data: { success: res.success, message: res.message }
    });
  }, (err) => {
    parentPort.postMessage({
      type: 'slam-stop-result',
      data: { success: false, message: err.toString() }
    });
  });
}

function sendSingleGoalToMoveBase(data) {
  if (!ros || !ros.isConnected) return;

  const goalTopic = new ROSLIB.Topic({
    ros: ros,
    name: '/move_base_simple/goal',
    messageType: 'geometry_msgs/PoseStamped',
  });

  const msg = new ROSLIB.Message({
    header: { frame_id: 'map' },
    pose: {
      position: data.pose.position,
      orientation: data.pose.orientation
    }
  });

  console.log(`üìç ‡∏™‡πà‡∏á goal (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á (${data.pose.position.x.toFixed(2)}, ${data.pose.position.y.toFixed(2)})`);
  goalTopic.publish(msg);
}

function publishInitialPose(pose) {
  if (!ros || !ros.isConnected) {
    console.error('Server : ‚ùå Cannot send initial pose: ROSBridge is not connected.');
    return;
  }

  const initialPoseTopic = new ROSLIB.Topic({
    ros: ros,
    name: '/initialpose',
    messageType: 'geometry_msgs/PoseWithCovarianceStamped'
  });

  const message = new ROSLIB.Message({
    header: {
      frame_id: 'map'
    },
    pose: {
      pose: {
        position: {
          x: pose.position.x,
          y: pose.position.y,
          z: 0
        },
        orientation: pose.orientation
      },
      // Covariance ‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô (‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
      covariance: [
        0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.25, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0685
      ]
    }
  });

  console.log('Server : üì§ Publishing to /initialpose:', message);
  initialPoseTopic.publish(message);
}

function callStartStreamService() {
  if (!ros || !ros.isConnected) {
    console.log('Server : Start Stream Service Failed: ROS is not connected.');
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ß‡πà‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    parentPort.postMessage({
      type: 'stream-status',
      data: {
        success: false,
        message: 'ROS is not connected.'
      }
    });
    return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
  }
  const service = new ROSLIB.Service({
    ros: ros,
    name: '/stream_manager/start',
    serviceType: 'std_srvs/Trigger'
  });
  service.callService(new ROSLIB.ServiceRequest({}), (result) => {
    console.log('Server : Start Stream Service Result:', result);
    parentPort.postMessage({ type: 'stream-status', data: result });
  });
}

function callStopStreamService() {
  if (!ros || !ros.isConnected) {
    console.log('Server : Start Stream Service Failed: ROS is not connected.');
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ß‡πà‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    parentPort.postMessage({
      type: 'stream-status',
      data: {
        success: false,
        message: 'ROS is not connected.'
      }
    });
    return;
  }
  const service = new ROSLIB.Service({
    ros: ros,
    name: '/stream_manager/stop',
    serviceType: 'std_srvs/Trigger'
  });
  service.callService(new ROSLIB.ServiceRequest({}), (result) => {
    console.log('Server : Stop Stream Service Result:', result);
    parentPort.postMessage({ type: 'stream-status', data: result });
  });
}

function callDeleteMapService(mapName) {
  if (!ros || !ros.isConnected) {
    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà UI ‡∏ú‡πà‡∏≤‡∏ô main process
    parentPort.postMessage({ type: 'map-delete-result', data: { success: false, message: 'ROSBridge not connected' } });
    return;
  }
  const service = new ROSLIB.Service({
    ros: ros,
    name: '/map_manager/delete_map',
    serviceType: 'ptR1_navigation/DeleteMap' // <--- ‡πÉ‡∏ä‡πâ Service Type ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  });
  const request = new ROSLIB.ServiceRequest({ name: mapName });
  service.callService(request, (result) => {
    parentPort.postMessage({ type: 'map-delete-result', data: result });
  }, (err) => {
    parentPort.postMessage({ type: 'map-delete-result', data: { success: false, message: err.toString() } });
  });
}

function callResetSLAMService() {
  if (!ros || !ros.isConnected) {
    parentPort.postMessage({ type: 'slam-reset-result', data: { success: false, message: 'ROSBridge not connected' } });
    return;
  }
  const service = new ROSLIB.Service({
    ros: ros,
    name: '/map_manager/reset_slam',
    serviceType: 'ptR1_navigation/ResetSLAM' // <--- ‡πÉ‡∏ä‡πâ Service Type ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  });
  const request = new ROSLIB.ServiceRequest({});
  service.callService(request, (result) => {
    parentPort.postMessage({ type: 'slam-reset-result', data: result });
  }, (err) => {
    parentPort.postMessage({ type: 'slam-reset-result', data: { success: false, message: err.toString() } });
  });
}

function callStartPatrolService(goals, loop) {
  if (!ros || !ros.isConnected) {
    parentPort.postMessage({ type: 'patrol-start-result', data: { success: false, message: 'ROS is not connected.' } });
    return;
  }
  const service = new ROSLIB.Service({
    ros,
    name: '/map_manager/start_patrol',
    serviceType: 'ptR1_navigation/StartPatrol'
  });
  const request = new ROSLIB.ServiceRequest({ goals, loop });
  service.callService(request, (result) => {
    parentPort.postMessage({ type: 'patrol-start-result', data: result });
  }, (err) => {
    parentPort.postMessage({ type: 'patrol-start-result', data: { success: false, message: err.toString() } });
  });
}

function callPausePatrolService() {
  if (!ros || !ros.isConnected) return;
  const service = new ROSLIB.Service({ ros, name: '/map_manager/pause_patrol', serviceType: 'ptR1_navigation/PausePatrol' });
  service.callService(new ROSLIB.ServiceRequest({}), (result) => {
    parentPort.postMessage({ type: 'patrol-pause-result', data: result });
  });
}

function callResumePatrolService() {
  if (!ros || !ros.isConnected) return;
  const service = new ROSLIB.Service({ ros, name: '/map_manager/resume_patrol', serviceType: 'ptR1_navigation/ResumePatrol' });
  service.callService(new ROSLIB.ServiceRequest({}), (result) => {
    parentPort.postMessage({ type: 'patrol-resume-result', data: result });
  });
}

function callStopPatrolService() {
  if (!ros || !ros.isConnected) return;
  const service = new ROSLIB.Service({ ros, name: '/map_manager/stop_patrol', serviceType: 'ptR1_navigation/StopPatrol' });
  service.callService(new ROSLIB.ServiceRequest({}), (result) => {
    parentPort.postMessage({ type: 'patrol-stop-result', data: result });
  });
}

setTimeout((url) => {
  if (!rosAutoConnected) {
    console.log('Server : ‚è≥ No IP received in 3s, connecting to localhost fallback...');
  }
}, 3000);

parentPort.postMessage({ type: 'log', data: 'Worker Initialized' });

module.exports = {
  connectROSBridge,
  sendDrive,
  sendCommand,
  sendServo
};
