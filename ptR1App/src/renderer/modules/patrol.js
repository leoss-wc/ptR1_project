//resume/stop/start, index estimate

// modules/patrol.js
// üëâ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î path, ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á patrol, ‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î ‡πÅ‡∏•‡∏∞ resume;
import * as patrolState from './patrolState.js';
import { renderDashboardMap } from './mapHome.js';



//‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å pixel ‚Üí world
//‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
function pixelToWorld(pixelX, pixelY, canvasWidth, canvasHeight, mapMeta) {
    // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î (0,0) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á canvas
    const xPixelFromCenter = pixelX - canvasWidth / 2;
    const yPixelFromCenter = pixelY - canvasHeight / 2;

    const { resolution, origin, height: mapHeightInPixels } = mapMeta;

    // ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏Å‡∏ô Y ‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏û Y ‡∏ä‡∏µ‡πâ‡∏•‡∏á, ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ROS Y ‡∏ä‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô)
    // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° YAML ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    const xWorld = origin[0] + (xPixelFromCenter * resolution);
    const yWorld = origin[1] - (yPixelFromCenter * resolution);

    return { x: xWorld, y: yWorld };
}



// üéØ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î goal ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà canvas)
export function enableSingleGoal(canvas, activeMap) {
  canvas.addEventListener('contextmenu', (e) => {
    e.preventDefault();
    if (!activeMap || !activeMap.meta) {
        console.warn("Cannot set single goal: Active map or meta is missing.");
        return;
    }

    const rect = canvas.getBoundingClientRect();
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á
    const worldCoords = pixelToWorld(
      e.clientX - rect.left,
      e.clientY - rect.top,
      canvas.width,
      canvas.height,
      activeMap.meta
    );

    console.log("Sending single goal:", worldCoords);
    window.electronAPI.sendSingleGoal(worldCoords);
    patrolState.stopPatrolState(); // ‡∏´‡∏¢‡∏∏‡∏î patrol ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á single goal
  });
}
// üü¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏î‡∏ï‡∏£‡∏∞‡πÄ‡∏ß‡∏ô
export function startPatrol() {
  patrolState.startPatrolState();
  if (patrolState.isPatrolling) {
    console.log("Sending start patrol command with goal:", patrolState.goalPoint);
    window.electronAPI.sendSingleGoal(patrolState.goalPoint);
  }
}

// ‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏î‡∏ï‡∏£‡∏∞‡πÄ‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
export function pausePatrol() {
    patrolState.pausePatrolState();
    console.log("Sending stop (cancel goal) command");
    
    window.electronAPI.cancelCurrentGoal();
}

// ‚ñ∂Ô∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏•‡∏≤‡∏î‡∏ï‡∏£‡∏∞‡πÄ‡∏ß‡∏ô‡∏ï‡πà‡∏≠
export function resumePatrol() {
    patrolState.resumePatrolState();
    if (patrolState.isPatrolling) {
        console.log("Sending resume patrol command with goal:", patrolState.goalPoint);
        window.electronAPI.sendSingleGoal(patrolState.goalPoint);
    }
}

// üî¥ ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏î‡∏ï‡∏£‡∏∞‡πÄ‡∏ß‡∏ô
export function stopPatrol() {
  patrolState.stopPatrolState();
  console.log("Sending stop (cancel goal) command");
  window.electronAPI.cancelCurrentGoal(); // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ API ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
}

export function initPatrolManager() {
  console.log("Patrol Manager Initialized.");
  // ‡∏ü‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å main process
  window.electronAPI.onGoalResult(handleGoalResult);
}

function handleGoalResult(result) {
  console.log('Patrol Manager received goal result:', result);

  switch (result.status) {
    case 'SUCCEEDED':
      console.log("Goal reached successfully. Moving to next...");
      const nextGoal = patrolState.moveToNextGoal();
      if (nextGoal) {
          window.electronAPI.sendSingleGoal(nextGoal);
      } else {
          console.log("Patrol finished!");
      }
      break;

    case 'ABORTED':
    case 'REJECTED':
    case 'LOST':
      patrolState.stopPatrolState(); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏î‡∏ï‡∏£‡∏∞‡πÄ‡∏ß‡∏ô
      alert(`Patrol Failed! Reason: ${result.status}\nDetails: ${result.text}`);
      break;
    
    case 'PREEMPTED':
    case 'RECALLED':
       // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á Goal ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
       console.log(`Patrol stopped by user action (${result.status}).`);
       break;
  }
  
  // ‡∏™‡∏±‡πà‡∏á‡∏ß‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
  if (typeof renderDashboardMap === 'function') {
      renderDashboardMap();
  }
}
