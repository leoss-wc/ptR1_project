// renderer.js

// ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà line 1 ‡∏ñ‡∏∂‡∏á 212) ...

// ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è

// Import ‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ path ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
import { PatrolManager } from './modules/patrolManager.js';

// üì¶ Map Interface
const canvas_map = document.getElementById('staticMapCanvas');
let mapImage = null;
let zoom = 1.0;
let offsetX = 0;
let offsetY = 0;
let isDragging = false;
let dragStartX = 0;
let dragStartY = 0;

// --- State ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Patrol ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ---
// const patrolPath = []; // <-- ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
// let goalPoint = null; // <-- ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
let mode = 'none'; // 'none', 'goal', 'draw' (State ‡∏Ç‡∏≠‡∏á UI ‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)

let current_map_select = { name: null, base64: null };
let activeMap = { name: null, base64: null };

// --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ---
PatrolManager.init();

// ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô sync-maps-btn, onSyncComplete, loadLocalMaps, open-map-folder-btn, showOnCanvas... line 238-284) ...

function renderCanvas() {
  // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á renderCanvas ... line 285-311) ...

  // --- üü† ‡∏ß‡∏≤‡∏î path (‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Manager) ---
  const path = PatrolManager.getPath(); // <-- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Manager
  if (path.length > 0) {
    ctx.strokeStyle = 'orange';
    ctx.lineWidth = 2;
    ctx.beginPath();

    path.forEach((pt, i) => { // <-- ‡πÉ‡∏ä‡πâ path ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
      const drawX = canvas_map.width / 2 + pt.x * zoom + offsetX;
      const drawY = canvas_map.height / 2 + pt.y * zoom + offsetY;
      if (i === 0) {
        ctx.moveTo(drawX, drawY);
      } else {
        ctx.lineTo(drawX, drawY);
      }
    });

    ctx.closePath();
    ctx.stroke();

    // üîµ ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î
    ctx.fillStyle = 'cyan';
    path.forEach((pt) => { // <-- ‡πÉ‡∏ä‡πâ path ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
      const drawX = canvas_map.width / 2 + pt.x * zoom + offsetX;
      const drawY = canvas_map.height / 2 + pt.y * zoom + offsetY;
      ctx.beginPath();
      ctx.arc(drawX, drawY, 4, 0, Math.PI * 2);
      ctx.fill();
    });
  }
  
  // --- üéØ ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î goal (‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Manager) ---
  const goal = PatrolManager.getGoalPoint(); // <-- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Manager
  if (goal) { // <-- ‡πÉ‡∏ä‡πâ goal ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
    const drawX = canvas_map.width / 2 + goal.x * zoom + offsetX;
    const drawY = canvas_map.height / 2 + goal.y * zoom + offsetY;

    ctx.fillStyle = 'red';
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î goal ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ... line 348-358)
    ctx.stroke();
  }
}

// ... (‡πÇ‡∏Ñ‡πâ‡∏î Zoom Controls ... line 360-413) ...

document.getElementById('clear-path-btn').addEventListener('click', () => {
  PatrolManager.clearPathAndGoal(); // <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Manager
  cancelMode(); // (cancelMode ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ)
  console.log('Cleared Path and Point Goal');
});

// ... (‡πÇ‡∏Ñ‡πâ‡∏î save-path-btn, Mouse drag ... line 420-457) ...

// ** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ click listener 2 ‡∏≠‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö canvas_map 
// ** ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏£‡∏≠ 'isDrawMode' ‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏±‡πä‡∏Å)
// ** ‡∏ú‡∏°‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö mode = 'draw'

// *** (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á mode 'draw' ‡πÉ‡∏ô HTML ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏ä‡πà‡∏ô id="draw-path-btn") ***
const drawPathBtn = document.getElementById('draw-path-btn'); // (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ)

if(drawPathBtn) {
  drawPathBtn.addEventListener('click', () => {
    if (mode === 'draw') {
      cancelMode();
    } else {
      mode = 'draw';
      canvas_map.style.cursor = 'copy';
      drawPathBtn.classList.add('active');
      setGoalBtn.classList.remove('active'); // ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏∑‡πà‡∏ô
    }
  });
}

// Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ß‡∏≤‡∏î Path" (‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∑‡∏≠ line 458)
canvas_map.addEventListener('click', (e) => {
  if (mode !== 'draw' || isDragging) return; // <-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ mode 'draw'

  const rect = canvas_map.getBoundingClientRect();
  const clickX = e.clientX - rect.left - canvas_map.width / 2;
  const clickY = e.clientY - rect.top - canvas_map.height / 2;

  const x = (clickX - offsetX) / zoom;
  const y = (clickY - offsetY) / zoom;

  PatrolManager.addPathPoint({ x, y }); // <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Manager
  renderCanvas();
});

// ... (‡πÇ‡∏Ñ‡πâ‡∏î window resize ... line 471) ...

const setGoalBtn = document.getElementById('set-goal-btn');

setGoalBtn.addEventListener('click', () => {
  if (mode === 'goal') {
    cancelMode();
  } else {
    mode = 'goal';
    canvas_map.style.cursor = 'crosshair';
    setGoalBtn.classList.add('active');
    if(drawPathBtn) drawPathBtn.classList.remove('active'); // ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏∑‡πà‡∏ô
  }
});

// Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ï‡∏±‡πâ‡∏á Goal" (‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∑‡∏≠ line 486)
canvas_map.addEventListener('click', (e) => {
  if (isDragging || mode !== 'goal') return;

  const rect = canvas_map.getBoundingClientRect();
  const clickX = e.clientX - rect.left - canvas_map.width / 2;
  const clickY = e.clientY - rect.top - canvas_map.height / 2;

  const mapX = (clickX - offsetX) / zoom;
  const mapY = (clickY - offsetY) / zoom;

  console.log(`üéØ Goal: (${mapX.toFixed(2)}, ${mapY.toFixed(2)})`);
  
  PatrolManager.setGoalPoint({ x: mapX, y: mapY }); // <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Manager

  cancelMode(); // ‚úÖ ‡∏≠‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å
  // goalPoint = { x: mapX, y: mapY }; // <-- ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
  renderCanvas();
});

// ... (‡πÇ‡∏Ñ‡πâ‡∏î contextmenu, document click ... line 505-524) ...

function cancelMode() {
  mode = 'none';
  canvas_map.style.cursor = 'default';
  setGoalBtn.classList.remove('active');
  if(drawPathBtn) drawPathBtn.classList.remove('active');
  
  PatrolManager.clearGoal(); // <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Manager (‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡πÅ‡∏Ñ‡πà goal, ‡πÑ‡∏°‡πà‡∏•‡∏ö path)
  // goalPoint = null; // <-- ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
  renderCanvas();
}

// ... (‡πÇ‡∏Ñ‡πâ‡∏î select-map-btn, save-map-btn, onMapSaveResult ... line 533-555) ...

document.getElementById('start-patrol-btn').addEventListener('click', () => {
  PatrolManager.startPatrol(); // <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Manager
});

// ‡∏õ‡∏∏‡πà‡∏° Stop Patrol ‚Üí ‡∏™‡πà‡∏á stop command
document.getElementById('stop-patrol-btn').addEventListener('click', () => {
  PatrolManager.stopPatrol(); // <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Manager
});

// --- ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å ---
// window.electronAPI.onPatrolStatus((isMoving) => { ... }); // (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ Manager)

// ... (‡πÇ‡∏Ñ‡πâ‡∏î SLAM ... line 583-617) ...

// ... (‡πÇ‡∏Ñ‡πâ‡∏î LiveMap ... line 620-718) ...

// --- ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å ---
// let currentPatrolIndex = 0; // (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ Manager)
// let isPatrolling = false; // (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ Manager)
// window.electronAPI.onPatrolStatus((isMoving) => { ... }); // (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ Manager)
// function estimateCurrentIndex() { ... } // (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ Manager)


document.getElementById('resume-patrol-btn').addEventListener('click', () => {
  PatrolManager.resumePatrol(); // <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Manager
});

// ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ... line 753 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ) ...