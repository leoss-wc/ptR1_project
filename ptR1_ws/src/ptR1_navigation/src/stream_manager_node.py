#!/usr/bin/env python3

import rospy
import subprocess
from std_srvs.srv import Trigger, TriggerResponse

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö FFmpeg process ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
ffmpeg_process = None

def handle_start_stream(req):
    """
    Service handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏°
    """
    global ffmpeg_process
    rospy.loginfo("Received request to start FFmpeg stream.")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ process ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if ffmpeg_process is not None and ffmpeg_process.poll() is None:
        rospy.logwarn("FFmpeg stream is already running.")
        return TriggerResponse(success=False, message="Stream is already running.")

    # --- üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á FFmpeg ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ---
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á USB (/dev/video0) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á MediaMTX
    ffmpeg_command = [
        'ffmpeg',
        '-f', 'v4l2',      # Source format
        '-i', '/dev/video0', # Source device (‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô path ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
        '-c:v', 'libx264', # Video codec
        '-preset', 'ultrafast',
        '-tune', 'zerolatency',
        '-f', 'rtsp',      # Output format
        'rtsp://localhost:8554/mystream' # Destination MediaMTX (‡πÅ‡∏Å‡πâ path ‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    ]
    
    try:
        rospy.loginfo(f"Executing command: {' '.join(ffmpeg_command)}")
        # ‡∏£‡∏±‡∏ô FFmpeg ‡πÄ‡∏õ‡πá‡∏ô background process
        ffmpeg_process = subprocess.Popen(ffmpeg_command)
        return TriggerResponse(success=True, message="FFmpeg stream started successfully.")
    except Exception as e:
        rospy.logerr(f"Failed to start FFmpeg: {e}")
        return TriggerResponse(success=False, message=str(e))

def handle_stop_stream(req):
    """
    Service handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏°
    """
    global ffmpeg_process
    rospy.loginfo("Received request to stop FFmpeg stream.")

    if ffmpeg_process is None or ffmpeg_process.poll() is not None:
        rospy.logwarn("FFmpeg stream is not running.")
        return TriggerResponse(success=False, message="Stream is not running.")

    try:
        rospy.loginfo(f"Terminating FFmpeg process with PID: {ffmpeg_process.pid}")
        ffmpeg_process.terminate() # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ process ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        ffmpeg_process.wait(timeout=5) # ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        ffmpeg_process = None
        return TriggerResponse(success=True, message="FFmpeg stream stopped successfully.")
    except subprocess.TimeoutExpired:
        rospy.logerr("FFmpeg process did not terminate in time, killing.")
        ffmpeg_process.kill()
        ffmpeg_process = None
        return TriggerResponse(success=False, message="Stream was forcefully killed.")
    except Exception as e:
        rospy.logerr(f"Failed to stop FFmpeg: {e}")
        return TriggerResponse(success=False, message=str(e))

def stream_manager_server():
    rospy.init_node('stream_manager_server')
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Service ‡∏ä‡∏∑‡πà‡∏≠ /stream_manager/start
    rospy.Service('/stream_manager/start', Trigger, handle_start_stream)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Service ‡∏ä‡∏∑‡πà‡∏≠ /stream_manager/stop
    rospy.Service('/stream_manager/stop', Trigger, handle_stop_stream)
    
    rospy.loginfo("üöÄ Stream Manager is ready.")
    rospy.spin()

if __name__ == "__main__":
    stream_manager_server()